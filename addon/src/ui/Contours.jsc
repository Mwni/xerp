import colorlib from '../utils/colorlib.js'
import gsap from 'gsap'


export default node => {
	let renderer

	return {
		oncreate: node => {
			renderer = new Renderer(
				node.dom.querySelector('canvas').getContext('webgl'), 
				node.attrs
			)
		},
		view: node => (
			<div class="contours">
				<canvas width={node.attrs.width} height={node.attrs.height}/>
			</div>
		)
	}
}





class Renderer{
	constructor(gl, cfg){
		this.gl = gl

		switch(cfg.mode){
			case 'splash':
				this.makeSplashGeometry()
				this.setSplashColors()
				break

			case 'card':
				this.makeCardGeometry()
				this.makeGradient(cfg.color)
		}

		
		this.initGL()
		this.render()
	}

	makeSplashGeometry(){
		this.angle = Math.PI * 0.6

		this.indent = [
			[
				1,
				0.9,
				1,
				0.2
			],
			[
				0.4,
				0.2,
				0.7,
				-0.1
			]
		]

		/*gsap.to(this.indent[0], {
			'3': -0.55,
			duration: 1.5,
			ease: 'power1.out'
		})*/

		let fx = () => {
			this.x1 = 0
			this.x2 = -0.45
			this.x3 = Math.PI*0.9

			gsap.to(this, {
				x1: 1,
				duration: 1,
				ease: 'power1.out'
			})
			gsap.to(this, {
				x2: 0.2,
				duration: 2,
				ease: 'power1.inOut'
			})

		}
		fx()
	}


	makeGradient(color){
		let base = colorlib.hexToRgb(color)
		let hsv = colorlib.rgbToHsv(base)
		let ahsv = {h: hsv.h + Math.PI * 0.98, s: hsv.s * 0.2, v: hsv.v * 1.3}
		let alter = colorlib.hsvToRgb(ahsv)
		let alterVec = [alter.r/255, alter.g/255, alter.b/255, 1]
		let baseVec = [base.r/255, base.g/255, base.b/255, 1]

		this.color = [
			...baseVec,
			...alterVec,
			...baseVec,
			...alterVec,
		]
	}

	setSplashColors(){
		let color = []
		let hexs = [
			'#00ce75',
			'#d22af8',
			'#278cf9',
			'#ff8b3c',
		]

		for(let hex of hexs){
			let { r, g, b } = colorlib.hexToRgb(hex)
			color = [...color, r/255, g/255, b/255, 1]
		}

		this.color = color
	}

	initGL(){
		let gl = this.gl

		gl.getExtension('OES_standard_derivatives')

		let vertexBuffer = gl.createBuffer()
		let colorBuffer = gl.createBuffer()
		let program = this.createProgram(vertexSrc, fragmentSrc)
		let vertexPointer = gl.getAttribLocation(program, 'vertex')
		let colorPointer = gl.getAttribLocation(program, 'color')

		gl.useProgram(program)


		gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer)
		gl.bufferData(
			gl.ARRAY_BUFFER, 
			new Float32Array([
				1, 1,
				-1, 1,
				1, -1,
				-1, -1
			]), 
			gl.STATIC_DRAW
		)
		gl.vertexAttribPointer(vertexPointer, 2, gl.FLOAT, false, 0, 0)
		gl.enableVertexAttribArray(vertexPointer)




		gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer)
		gl.bufferData(
			gl.ARRAY_BUFFER, 
			new Float32Array(this.color), 
			gl.STATIC_DRAW
		)
		gl.vertexAttribPointer(colorPointer, 4, gl.FLOAT, false, 0, 0)
		gl.enableVertexAttribArray(colorPointer)

		gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight)


		this.viewportPointer = gl.getUniformLocation(program, 'viewport')
		this.anglePointer = gl.getUniformLocation(program, 'angle')
		this.indentPointers = [
			gl.getUniformLocation(program, 'indent[0]'),
			gl.getUniformLocation(program, 'indent[1]')
		]

		this.xx = 0
	}

	flushUniforms(){
		this.gl.uniform2fv(this.viewportPointer, [this.gl.drawingBufferWidth, this.gl.drawingBufferHeight])
		this.gl.uniform1f(this.anglePointer, this.angle)
		this.gl.uniform4fv(this.indentPointers[0], this.indent[0])
		this.gl.uniform4fv(this.indentPointers[1], this.indent[1])
	}

	render(){
		this.angle = Math.PI * 0.9 + Math.sin(this.xx) * 0.1
		this.indent[0][0] = this.x1 + this.x2
		this.indent[1][0] = 1 - (this.x1 + this.x2)

		//this.indent[0][0] = 0.5 + 0.5 * Math.sin(this.xx)
		//this.indent[1][0] = 0.5 - 0.5 * Math.sin(this.xx)
		this.xx += 0.01
		this.flushUniforms()
		this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4)

		requestAnimationFrame(() => this.render())
	}

	compileShader(type, source){
		let shader = this.gl.createShader(type)

		this.gl.shaderSource(shader, source)
		this.gl.compileShader(shader)

		if(!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)){
			let log = this.gl.getShaderInfoLog(shader)

			this.gl.deleteShader(shader)

			throw new Error('failed to compile shader: '+log)
		}

		return shader
	}

	createProgram(vertex, fragment){
		let vertexShader = this.compileShader(this.gl.VERTEX_SHADER, vertex)
		let fragmentShader = this.compileShader(this.gl.FRAGMENT_SHADER, fragment)
		let program = this.gl.createProgram()

		this.gl.attachShader(program, vertexShader)
		this.gl.attachShader(program, fragmentShader)
		this.gl.linkProgram(program)
		
		if(!this.gl.getProgramParameter(program, this.gl.LINK_STATUS)){
			throw new Error('failed to setup shader: '+this.gl.getProgramInfoLog(program))
		}
		
		return program
	}
}






const vertexSrc = `
precision mediump float;

attribute vec2 vertex;
attribute vec4 color;

varying vec4 vColor;

void main() 
{
	gl_Position = vec4(vertex, 0, 1);
	vColor = color;
}
`


const fragmentSrc = `
#extension GL_OES_standard_derivatives : enable

precision mediump float;

uniform float angle;
uniform vec2 viewport;
uniform vec4 indent[2];

varying vec4 vColor;


float calcIndent(vec2 at, vec4 indent)
{
	float dist = distance(at, vec2(indent.x, indent.y * (viewport.y / viewport.x)));

	if(dist < indent.z){
		float inv = (indent.z - dist) / indent.z;

		return sign(inv) * pow(inv, 2.0) * indent.w;
	}else{
		return 0.0;
	}
}

float calcHeight(vec2 at, float angle)
{
	vec2 dir = vec2(sin(angle), cos(angle));
	vec2 perp = vec2(dir.y, -dir.x);
	vec2 point = perp * 3.0 + dir;
	vec2 aim = point - at;
	float h = abs(dot(perp, aim)) * 0.333;
	
	h += calcIndent(at, indent[0]);
	h += calcIndent(at, indent[1]);

	return h;
}


void main()
{
	vec2 uv = gl_FragCoord.xy/viewport.xx;
	float z = calcHeight(uv, angle) * 200.0;
	float contour = fract(z);
	
	if(mod(z, 2.0) > 1.0) 
		contour = 1.0 - contour;

	contour = contour/(fwidth(z) * 1.25);
	contour = smoothstep(1.0, 0.0, contour);
	
	gl_FragColor = vColor * contour;
}
`